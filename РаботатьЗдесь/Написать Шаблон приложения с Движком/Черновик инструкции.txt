Это шаблон для ускорения создания приложения, которое:
- подобно Инвентарь...
- должно работать с наборами данных, размещенными в выбранном месте. 
- Должно также давать доступ к данным для автоматических алгоритмов или других программ.
- Интерактивное.
- содержит БД для хранения большей части данных, и файловое хранилище для вспомогательных файлов.
- но пока не ведет лог действий! Лог тоже нужен, его надо сюда добавить.
----------------------------------------------------------------------------------
Состояние:
- пункты действий написаны. Возможно, потребуются небольшие доработки и стыковки в них.
- По этой инструкции можно получить Проект студии, который умеет запускать движок и открывать проект данных этого движка.
  Остальной функционал нужно добавить вручную, он зависит от темы проекта.
- Надо переразнести пункты, распределив их по этапам, проектам и файлам классов. Чтобы все изменения в одном классе сразу делать, а не прыгать по проекту туда-сюда. 
- Надо добавить пункт Выполнить сборку солюшена.
- Надо бы добавить пункты про инсталлятор и его скрипты. Чтобы сразу в проект их развернуть.
  Или оставить это отдельным шаблоном? 
-- Инсталлятор следует вынести в отдельный шаблонный процесс. Это будет и гибко, и правильно.  
   А тут  - ничего лишнего. Просто надо бы напомнить - упомянуть его в конце.
- Надо пронумеровать пункты шаблона
- Надо написать документ Инструкцию. С версией шаблона. а тут - черновик.
- Надо собрать шаблон в архив и положить в архив...   
----------------------------------------------------------------------------------
Детали устройства проекта для шаблона:

- приложение-оболочка
-- настройки - путь к последнему открытому проекту
-- файл-болванка справки приложения-оболочки .chm
-- форма диалога О программе, стандартная или кастомная.
--- ее все равно вручную исправлять приходится обычно.

- сборка движка: назвать XXXEngine.dll где ХХХ - аббревиатура сути проекта
-- файл БД внести как ресурс в сборку движка
- файл настроек проекта (файл + класс для доступа) settings.xml стандартное название
- менеджер для управления каталогом проекта (класс)
- адаптер БД (класс)
- Класс, представляющий движок.
-- функция Создать БД - извлечь БД из ресурсов сборки движка.
-- друге стандартные функции Адаптера БД.
- функции движка: Создать, Открыть, Закрыть, Идентифицировать каталог проекта.
- БотАпи - примерный набор функций, особенно обслуживающие функции.
- EngineClass - (новое!) класс движка для семантического обозначения движка и его наборов данных.

- каталог проекта
-- хранит данные для работы программы
- файл БД проекта base.mdb стандартное название
- файл настроек движка settings.xml  стандартное название

-----------------------------------------------------------
Состояние инструкции: 
- записаны все действия создания деталей проекта приложения, хотя еще будет к нему возврат.
-----------------------------------------------------------
Действия:
- открыть студию
- создать новый солюшен. Выбрать NET Framework 2.0 !
- создать проект приложения-оболочки. Назвать его по имени разрабатываемого проекта или как описание сути приложения.
- создать проект dll. Назвать XXXEngine.dll где ХХХ - аббревиатура сути проекта.
- создать проект консольного приложения, назвать его Tester. Это будет приложение для тестирования отдельных функций dll в текстовом режиме.
- установить свойства-описания сборок для проектов:
-- Для каждого из проектов солюшена в меню Project-Properties на вкладке Application нажать кнопку Assembly information.. и ввести в форму правильные тексты: Название сборки, описание сборки, название компании, название всего продукта, копирайт исправить. 
- установить платформу как х86, иначе БД аксцесс не будет работать на Windows 7 и выше:
-- меню Build-Configuration manager.. откроет диалог Configuration manager, в нем комбобокс Active solution platform - там надо выбрать пункт <New..> . Тогда откроется новая форма, в ней надо выбрать в верхнем комбобоксе пункт х86, и галочка внизу должна быть.
После закрытия диалогов все проекты должны иметь платформу х86.

- в проекте приложения-оболочки:
-- установить новую иконку приложения, выбрав ее из коллекции иконок. (Описатьтребования к иконке!)
-- переименовать форму Form1 в MainForm. И ее файлы классов соответственно.
-- Скопировать текстовый файл Readme.txt из шаблона проекта. Установить свойство Copy to Output directory = Copy always
-- Скопировать текстовый файл ToDo.txt из шаблона проекта. Установить свойство Copy to Output directory = Do not copy
-- Скопировать текстовый файл Лицензионное соглашение.txt из шаблона проекта. Установить свойство Copy to Output directory = Copy always
-- Скопировать файл Справка.chm из шаблона проекта. Установить свойство Copy to Output directory = Copy always
--  Добавить в приложение форму AboutBox: стандартную из студии или создать вручную.
- В форму MainForm:
-- Добавить компонент ToolStripContainer - с ним проще потом добавлять тулбары и другие элементы.
-- Добавить StatusStrip в нижней части окна
--- Добавить в него toolStripStatusLabel текстовую метку в качестве строки состояния.
-- Добавить MenuStrip в верхней части окна
--- Добавить в меню пункты:
Файл: Создать.., разделитель, Открыть.., Закрыть, разделитель, Выход
Правка: пока пусто.
Инструменты: Настройки
Справка: Содержание, О программе..
--- Установить подходящие иконки для пунктов меню, (взять их из Шаблона проекта или из другой коллекции иконок).
--- Добавить в ToDo.txt задачу Подобрать правильные иконки для пунктов меню.
--- для конечных пунктов меню создать обработчики кликов по ним.
---- в файле кода формы собрать эти обработчики в один регион *** Обработчики главного меню *** и выстроить согласно порядку в меню.
-- Переключить свойства формы в окно списка событий формы и создать обработчики для событий: Load и FormClosing.
- В класс формы MainForm.cs:
-- добавить константу названия окна: 
        /// <summary>
        /// Название окна приложения
        /// </summary>
        private const String MainFormTitle = "МенеджерПроектов";//TODO: Заменить на правильное
-- добавить функцию смены названия окна:
        /// <summary>
        /// RT-Изменить заголовок главной формы
        /// </summary>
        /// <param name="proj">Название проекта</param>
        /// <param name="update">Обновить вид формы?</param>
        private void changeFormTitle(string proj, bool update)
        {
            if (String.IsNullOrEmpty(proj))
                this.Text = MainFormTitle; // FormTitle;
            else this.Text = proj + " - " + MainFormTitle; //FormTitle;
            //update form view?
            if (update)
                Application.DoEvents();

            return;
        }
-- добавить функцию смены текста статусбара:
        /// <summary>
        /// NT-Установить новый текст статусбара
        /// </summary>
        /// <param name="text">Новый текст статусбара</param>
        /// <param name="update">Обновить вид формы?</param>
        private void setStatusStripText(string text, bool update)
        {
            this.toolStripStatusLabel1.Text = text;
            //update form view?
            if (update)
                Application.DoEvents();

            return;
        }		
 -- изменить обработчик пункта меню Файл-Выход:
        /// <summary>
        /// Пункт меню Закрыть приложение
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void выходToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
            //вся обработка завершения работы должна проводиться в Form.Closing()
        }
-- изменить обработчик пункта меню Справка-Содержание:
        /// <summary>
        /// RT-
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void содержаниеToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //операции показа справки по программе
            ShowHelp();
        }
-- изменить обработчик пункта меню Справка-О программе:
        /// <summary>
        /// RT-
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void оПрограммеToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutBoxForm frm = new AboutBoxForm(this);
            frm.ShowDialog(this);
            frm.Dispose();
            return;
        }	
--добавить функцию показа справки:
        /// <summary>
        /// NT-Показать файл справки
        /// </summary>
        private void ShowHelp()
        {
            Help.ShowHelp(this, Path.Combine(Application.StartupPath, "Справка.chm"));
            //TODO: обновить файл справки "Справка.chm" в каталоге проекта приложения, сгенерировав его и скопировав из папки Documentation
        }
		
-- Добавить функцию включения-выключения пунктов меню при открытии проекта:
        /// <summary>
        /// NT-включить-выключить пункты меню при открытии-закрытии проекта
        /// </summary>
        /// <param name="opened">True если проект открыт, False если закрыт</param>
        private void setEnableMainMenuItems(bool opened)
        {
            //если проект открыт, выключить одни пункты и включить другие
            //если проект закрыт, наоборот.
            this.создатьБДToolStripMenuItem.Enabled = !opened; //disable
            this.открытьБДToolStripMenuItem.Enabled = !opened; //disable
            this.закрытьToolStripMenuItem.Enabled = opened; //enable
            this.правкаToolStripMenuItem.Enabled = opened; //enable
            //меню Инструменты-Настройки должны быть всегда доступны?
            //TODO: другие пункты меню Инструменты зависят от состояния проекта? Но их пока нет.
            //меню Справка всегда доступно.

            return;
        }
-- создать стандартный файл настроек приложения и внести в него строку пути последнего открытого проекта:
--- Меню Project-Properties.. вкладка Settings: Создать строку LastProjectPath со значением С:\ и Scope=User.
-- подключить к приложению сборку движка:
В дереве структуры солюшена кликнуть пункт References-Add reference... выбрать вкладку Projects и указать проект движка, нажать ОК.


---------------------------------------------------------------------------------------------------
Теперь переходим к проекту движка:
Напоминание сверху сюда: потом удалить?
+ сборка движка: назвать XXXEngine.dll где ХХХ - аббревиатура сути проекта
+- файл БД внести как ресурс в сборку движка
+ файл настроек проекта (файл + класс для доступа) settings.xml стандартное название
+ менеджер для управления каталогом проекта (класс)
+ адаптер БД (класс)
+- функция Создать БД - извлечь БД из ресурсов сборки движка.
-- другие стандартные функции Адаптера БД.
+ Класс, представляющий движок.
- функции движка: Создать, Открыть, Закрыть, Идентифицировать каталог проекта.
- БотАпи - примерный набор функций, особенно обслуживающие функции.
---------------------------------------------------------------------------------------------------	
- в сборке движка:
-- Скопировать текстовый файл EngineReadme.txt из шаблона проекта. Установить свойство Copy to Output directory = Copy always
-- Скопировать текстовый файл ToDo.txt из шаблона проекта. Установить свойство Copy to Output directory = Do not copy	
-- добавить класс Engine из шаблона проекта - главный класс движка.
-- добавить класс DbAdapter из шаблона проекта.
-- файл БД внести как ресурс в сборку движка:
--- открыть свойства проекта движка. На вкладке Resources выбрать меню Add resource-AddExisting file.., указать файл БД из шаблона проекта. Появится окно Data source configuration wizard, в нем надо нажать Cancel, так как незачем создавать датасет итд.
---- название base нельзя использовать для ресурса!
--- исправить код функции extractDbFile в классе DbAdapter, если потребуется:
        /// <summary>
        /// NT-Извлечь файл шаблона базы данных из ресурсов сборки
        /// </summary>
        /// <remarks>
        /// Файл БД должен быть помещен в ресурсы сборки в VisualStudio2008.
        /// Окно Свойства проекта - вкладка Ресурсы - кнопка-комбо Добавить ресурс - Добавить существующий файл. Там выбрать файл БД.
        /// При этом он помещается также в дерево файлов проекта, и при компиляции берется оттуда и помещается в сборку как двоичный массив байт.
        /// После этого можно изменять этот файл проекта, изменения в ресурс сборки будут внесены после компиляции
        /// Эта функция извлекает файл БД в указанный путь файла.
        /// </remarks>
        /// <param name="filepath">Путь к итоговому файлу *.mdb</param>
        public static void extractDbFile(string filepath)
        {
            FileStream fs = new FileStream(filepath, FileMode.Create);
            byte[] content = Properties.Resources.dbase;//Укажите здесь имя ресурса - шаблона БД
            fs.Write(content, 0, content.Length);
            fs.Close();
        }
 -- добавить класс Utility из шаблона проекта. Он должен содержать вспомогательные статические функции, которые пригодятся в коде движка или приложения-оболочки. Неиспользуемые функции можно будет удалить перед окончательным релизом.
 -- добавить класс ProjectFolderManager из шаблона проекта. Это класс для обслуживания каталога данных проекта. Его надо затем наполнить правильным кодом. 
 --- Состав каталога данных проекта не определен заранее, поэтому код класса придется дописывать под текущее состояние проекта.
 -- добавить класс EngineSettings из шаблона проекта. Это класс для обслуживания файла настроек движка settings.xml. Он же представляет настройки движка в памяти процесса. Его надо затем наполнить правильным кодом, согласно списку настроек движка. 
 --- Список настроек движка не определен заранее, поэтому код класса придется дописывать под текущее состояние проекта. 
 ----------------------------------------------------------------------------------------------
 
 Этап 3: благоустройство
 
 - в форму MainForm приложения-оболочки добавить поле и проперти Engine ссылки на экземпляр Движка:
         /// <summary>
        /// Менеджер движка 
        /// </summary>
        private PMEngine.Engine m_Engine;
		
        #region  Properties
        /// <summary>
        /// Менеджер движка управления проектами
        /// </summary>
        public PMEngine.Engine Engine
        {
            get { return m_Engine; }
        }
        #endregion

- Добавить в движок новую форму: EngineSettingForm
  Это файлы:   	EngineSettingForm.cs  EngineSettingForm.Designer.cs  EngineSettingForm.resx
-- Как добавить их как одну форму - я пока не знаю...
  
- Изменить функции-обработчики меню Файл:
        #region *** Обработчики главного меню ***
        //Меню Файл
        private void создатьБДToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                setStatusStripText("Создание нового проекта...", true);
                //достать путь к последнему проекту из настроек приложения
                String lastPath = Properties.Settings.Default.LastProjectPath;
                if (Engine.IsProjectFolder(lastPath))
                    lastPath = Path.GetDirectoryName(lastPath);
                else lastPath = String.Empty;
                //Заполнить объект свойств проекта  
                //показать свойства проекта пользователю отдельной формой
                EngineSettings si = new EngineSettings();
                si.Creator = "Павел Селяков";
                si.Description = "Описание проекта";
                si.Title = "Новый проект";

                //показать форму для ввода свойств нового проекта данных движка.
                si.StoragePath = lastPath; //в форме надо выбрать родительский каталог для каталога проекта
                //показать форму свойств проекта для редактирования
                if (EngineSettingForm.ShowForm(this, si, false) == DialogResult.OK)
                {
                    //Собственно создать проект
                    //si.StoragePath сейчас содержит корневой  каталог для каталога проекта,
                    //а после создания будет содержать собственно каталог проекта.
                    PMEngine.Engine.Create(si.StoragePath, si);
                    //открыть проект сразу же
                    this.LoadProject(si.StoragePath);
                    setStatusStripText(String.Format("Создан новый проект: {0}", si.Title), false);
                }
                else
                {
                    setStatusStripText("Создание проекта отменено пользователем", false);//отменено пользователем
                }
            }
            catch (Exception ex)
            {
                ShowErrorMessageBox("Ошибка", ex.ToString());
            }

            return;
        }

        private void открытьБДToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                setStatusStripText("Открытие проекта...", true);
                //TODO: исправить код здесь
                //достать путь к последнему проекту из настроек приложения
                String lastPath = Properties.Settings.Default.LastProjectPath;
                if (Engine.IsProjectFolder(lastPath))
                    lastPath = Path.GetDirectoryName(lastPath);
                else lastPath = String.Empty;

                //показать диалог выбора папки для проекта движка
                FolderBrowserDialog fbd = new FolderBrowserDialog();
                fbd.Description = "Укажите каталог открываемого проекта:";
                fbd.RootFolder = Environment.SpecialFolder.MyComputer;
                fbd.SelectedPath = lastPath;
                fbd.ShowNewFolderButton = false;

                if (fbd.ShowDialog() == DialogResult.OK)
                {
                    //открыть проект
                    this.LoadProject(fbd.SelectedPath);
                    //setStatusStripText(String.Format("Открыт проект {0}", this.m_Engine.Settings.Title), false); - это должно быть сделано в LoadProject()
                }
                else
                {
                    setStatusStripText("Открытие проекта отменено пользователем", false);
                }
            }
            catch (Exception ex)
            {
                ShowErrorMessageBox("Ошибка", ex.ToString());
            }

            return;
        }

        private void закрытьToolStripMenuItem_Click(object sender, EventArgs e)
        {
            CloseProject();

            return;
        }

- в меню Правка обычно предусматриватся пункт Удалить неактивные элементы, унаследованный от Инвентарь.
  Это недостаточно хороший способ удаления данных, но пока ничего я не придумал лучше, чем удалять все за один раз.
  Приведем его код здесь, вдруг пригодится. 		
        //Меню Правка

        /// <summary>
        /// NR-
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void удалитьНеактивныеЭлементыToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //пока просто вызываем функцию удаления неактивных элементов после окна подтверждения операции
            DialogResult res = MessageBox.Show(this, "Вы действительно хотите удалить все неактивные элементы?", "Требуется подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (res == DialogResult.Yes)
                this.m_Engine.DeleteAllInactiveElements(this);
            //TODO: тут обновить вид если нужно

            //тут бы надо бы подтверждение, что удаление выполнено, наверно
            MessageBox.Show(this, "Неактивные элементы удалены.", "Операция завершена", MessageBoxButtons.OK, MessageBoxIcon.Information);
            return;
        }
		
        #endregion
- Изменить код обработчиков событий формы:

        #region *** Form обработчики ***
        /// <summary>
        /// NT-Начальная загрузка формы
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form1_Load(object sender, EventArgs e)
        {
            try
            {
                //выключить соответствующие пункты меню, пока движок не открыт.
                this.setEnableMainMenuItems(false);
                //TODO: тут придумать загрузку приложения 

                //достать путь к последнему проекту из настроек приложения
                String lastPath = Properties.Settings.Default.LastProjectPath;
                //если есть последний открытый проект, загрузить его. Иначе - показать справку при старте приложения.
                if (Engine.IsProjectFolder(lastPath))
                    LoadProject(lastPath);//загрузить проект
                else
                    ShowHelp();
            }
            catch (Exception ex)
            {
                ShowErrorMessageBox("Ошибка", ex.ToString());
            }
            return;
        }
		
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            //в любом случае закрывается форма, этот код проводит завершение работы и очистку
            CloseProject();

            return;
        }
        #endregion
		
- добавить функции Открытия и Закрытия проекта: 
  Они отделены от обработчиков формы и предназначены для собственно открытия и закрытия проекта. 
        /// <summary>
        /// NT-Процесс инициализации приложения
        /// </summary>
        private void LoadProject(string projectFolderPath)
        {
            //try-catch делать в вызывающих функциях!

            //выключить соответствующие пункты меню, пока движок не открыт.
            this.setEnableMainMenuItems(false);
            //
            setStatusStripText(String.Format("Открытие проекта {0}", projectFolderPath), true);
            //создать объект движка
            this.m_Engine = new Engine();
            this.m_Engine.Open(projectFolderPath, false);
            //изменить заголовок формы и строку статуса
            setStatusStripText(String.Format("Открыт проект: {0}", this.m_Engine.Settings.Title), false);
            changeFormTitle(this.m_Engine.Settings.Title, false);
            //включить соответствующие пункты меню, если движок открыт.
            this.setEnableMainMenuItems(true);

            return;
        }
		
        /// <summary>
        /// NT-Закрыть текущий проект
        /// </summary>
        private void CloseProject()
        {
            //throw new NotImplementedException();//TODO: Add code here...
            try
            {

                setStatusStripText("Закрытие проекта...", true);

                if (this.m_Engine != null)
                {
                    //save last project path
                    Properties.Settings.Default.LastProjectPath = this.m_Engine.Settings.StoragePath;
                    Properties.Settings.Default.Save();

                    //get project title string for status message
                    String projectTitle = this.m_Engine.Settings.Title;

                    this.m_Engine.Close();
                    this.m_Engine = null;

                    //выключить соответствующие пункты меню, пока движок не открыт.
                    this.setEnableMainMenuItems(false);
                    setStatusStripText(String.Format("Закрыт проект: {0}", projectTitle), false);
                    changeFormTitle("", false);
                }
            }
            catch (Exception ex)
            {
                ShowErrorMessageBox("Ошибка", ex.ToString());
            }

            return;
        }
- Добавить функцию показа диалога сообщения об ошибке.
  Она упрощает код показа сообщений об ошибке.
        /// <summary>
        /// NT-Показать диалог сообщения 
        /// </summary>
        /// <param name="text">Текст сообщения</param>
        /// <param name="title">Заголовок окна сообщения</param>
        private void ShowErrorMessageBox(string title, string text)
        {
            MessageBox.Show(this, text, title, MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

------------------------------------------------------------------------------------------------


 //добавить здесь еще - устал сейчас.
 //надо переделать файлы классов из шаблона на правильные, убрать из них лишний код и подписать все комментарии итп, регионы расставить правильно.
 //я там код изменил немного, он точно не будет сразу компилироваться, поэтому надо отлаживать его на экспериментальном проекте.
 //и вообще, вся эта тема особенно движок, непроработаны. поэтому пошаговая инструкция сейчас содержит много пробелов и неувязок. Но я надеюсь ее исправить и дополнить, когда буду создавать по ней проект.
 
 ---------------------
 И надо бекапить работу. Я вчера восстанавливал систему и потерял все эти файлы кода из папок на рабочем столе. Хорошо, они остались в снимке восстановления системы. Пришлось повозиться, но я их достал оттуда.
  Этот шаблон - это же проект. И он должен лежать там же где и проекты, а не на рабочем столе.
  - а где должны лежать готовые шаблоны? В папке Шаблоны проектов? (где будет сиротливо лежать один этот шаблон ?)
  - а как я намерен пополнять эту коллекцию шаблонов проектов?
  - как отслеживать версии шаблонов?
  - где хранить список имеющихся шаблонов проектов?
  - как я перед началом проекта смогу узнать что у меня есть шаблоны, и выбрать из них что-то?
  -- если бы была методика работы Создать новый софтовый проект, я бы в нее строчку вписал: Выбрать подходящий шаблон из МоиШаблоны.
  -- Или Оператор мог бы мне предложить выбрать шаблон при создании нового проекта через Оператор. (Это, в общем, одно и то же...)
  -- а как сейчас - шаблоны не используются, ничего не используется, если я про это не вспомню.

  
 


		


